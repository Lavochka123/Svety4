import logging
import os
import qrcode
import sqlite3
import uuid
import asyncio
import threading

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:
DESIGN, PHOTO_UPLOAD, PAGE1, PAGE2, PAGE3, SENDER, TIMES = range(7)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

PUBLIC_URL = "https://svety.uz"  # –ø—É–±–ª–∏—á–Ω—ã–π URL (—Å HTTPS)
DB_PATH = "app.db"

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ –≤–∞—à
TELEGRAM_BOT_TOKEN = "8046219766:YOUR_BOT_TOKEN"
bot =  __import__("telegram").Bot(token=TELEGRAM_BOT_TOKEN)

def create_table_if_not_exists():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É invitations —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS invitations (
            id TEXT PRIMARY KEY,
            design TEXT,
            bg_image TEXT,
            page1 TEXT,
            page2 TEXT,
            page3 TEXT,
            sender TEXT,
            times TEXT,
            chat_id TEXT
        )
    ''')
    conn.commit()
    conn.close()

create_table_if_not_exists()

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ Telegram
loop = asyncio.new_event_loop()
def run_loop(loop):
    asyncio.set_event_loop(loop)
    loop.run_forever()

threading.Thread(target=run_loop, args=(loop,), daemon=True).start()

def send_message_sync(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop."""
    future = asyncio.run_coroutine_threadsafe(
        bot.send_message(chat_id=chat_id, text=message),
        loop
    )
    return future.result(timeout=10)

def get_invitation(invite_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT design, bg_image, page1, page2, page3, sender, times, chat_id FROM invitations WHERE id = ?', (invite_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return {
            "id": invite_id,
            "design": row[0],
            "bg_image": row[1],
            "page1": row[2],
            "page2": row[3],
            "page3": row[4],
            "sender": row[5],
            "times": row[6].split("\n"),
            "chat_id": row[7]
        }
    return None

def save_invitation(design, bg_image, page1, page2, page3, sender, times, chat_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π invite_id (UUID).
    """
    invite_id = str(uuid.uuid4())
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT INTO invitations (id, design, bg_image, page1, page2, page3, sender, times, chat_id)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        invite_id,
        design,
        bg_image,
        page1,
        page2,
        page3,
        sender,
        "\n".join(times),
        str(chat_id)
    ))
    conn.commit()
    conn.close()
    return invite_id

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è —Ñ–æ–Ω–∞:"
    )
    keyboard = [
        [InlineKeyboardButton("üéÜ –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –Ω–æ—á—å", callback_data="design_elegant")],
        [InlineKeyboardButton("üåπ –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="design_romantic")],
        [InlineKeyboardButton("üé∂ –ú—É–∑—ã–∫–∞ –∏ –∫–∏–Ω–æ", callback_data="design_music")],
        [InlineKeyboardButton("üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ", callback_data="design_custom")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    return DESIGN

async def design_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ' ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ, –∏–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    context.user_data["design"] = choice

    if choice == "design_custom":
        await query.edit_message_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–æ–Ω–∞."
        )
        return PHOTO_UPLOAD
    else:
        # –ó–∞–¥–∞–µ–º –ø—É—Ç–∏ –∫ –∑–∞—Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–µ–º (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç–∏ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É static/designs)
        predefined_bg_images = {
            "design_elegant": "designs/elegant.jpg",
            "design_romantic": "designs/romantic.jpg",
            "design_music": "designs/music.jpg"
        }
        context.user_data["bg_image"] = predefined_bg_images.get(choice, "")
        await query.edit_message_text(
            text=(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ **–ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É** —Ç–µ–∫—Å—Ç–∞.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "¬´–î–æ—Ä–æ–≥–∞—è –ù–∞—Å—Ç—è! –•–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã... (–∏ —Ç.–¥.)¬ª"
            )
        )
        return PAGE1

async def handle_photo_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞."""
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return PHOTO_UPLOAD

    photo = update.message.photo[-1]  # –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    file = await photo.get_file()
    filename = f"{uuid.uuid4()}.jpg"
    upload_dir = "static/uploads"
    os.makedirs(upload_dir, exist_ok=True)
    file_path = os.path.join(upload_dir, filename)
    await file.download_to_drive(file_path)
    context.user_data["bg_image"] = "uploads/" + filename  # –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ static/

    await update.message.reply_text(
        "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ **–ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É** —Ç–µ–∫—Å—Ç–∞."
    )
    return PAGE1

async def get_page1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π."""
    page1_text = update.message.text.strip()
    context.user_data["page1"] = page1_text

    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ **–≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É**.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "¬´–¢—ã –º–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—à—å—Å—è, –∏ —è —Ä–µ—à–∏–ª(–∞) –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–µ-—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ... (–∏ —Ç.–¥.)¬ª"
    )
    return PAGE2

async def get_page2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–π."""
    page2_text = update.message.text.strip()
    context.user_data["page2"] = page2_text

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ **—Ç—Ä–µ—Ç—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É** ‚Äî —Å–∞–º–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "¬´–Ø —Ö–æ—á—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å —Ç–æ–±–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π –≤–µ—á–µ—Ä... –î–∞–≤–∞–π –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è... (–∏ —Ç.–¥.)¬ª"
    )
    return PAGE3

async def get_page3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    page3_text = update.message.text.strip()
    context.user_data["page3"] = page3_text

    await update.message.reply_text(
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º, –æ—Ç –∫–æ–≥–æ —ç—Ç–æ –ø–∏—Å—å–º–æ."
    )
    return SENDER

async def get_sender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏."""
    sender_text = update.message.text.strip()
    context.user_data["sender"] = sender_text

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {sender_text}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏). –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è\n"
        "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è\n"
        "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è"
    )
    return TIMES

async def get_times(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∏ QR-–∫–æ–¥."""
    times_text = update.message.text
    times_list = [line.strip() for line in times_text.splitlines() if line.strip()]

    design = context.user_data.get("design", "design_elegant")
    bg_image = context.user_data.get("bg_image", "")
    page1 = context.user_data.get("page1", "")
    page2 = context.user_data.get("page2", "")
    page3 = context.user_data.get("page3", "")
    sender = context.user_data.get("sender", "")
    chat_id = update.effective_chat.id

    invite_id = save_invitation(design, bg_image, page1, page2, page3, sender, times_list, chat_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_url = f"{PUBLIC_URL}/invite/{invite_id}"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    img = qrcode.make(invite_url)
    img_path = "invite_qr.png"
    img.save(img_path)

    with open(img_path, "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=(
                f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n"
                f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {invite_url}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å –µ—ë –≤–æ–∑–ª—é–±–ª–µ–Ω–Ω–æ–π (–∏–ª–∏ –ø–æ–∫–∞–∂–∏ QR-–∫–æ–¥)."
            )
        )

    os.remove(img_path)
    return ConversationHandler.END

def main():
    BOT_TOKEN = "8046219766:AAGFsWXIFTEPe8aaTBimVyWm2au2f-uIYSs"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DESIGN: [CallbackQueryHandler(design_choice)],
            PHOTO_UPLOAD: [MessageHandler(filters.PHOTO, handle_photo_upload)],
            PAGE1: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_page1)],
            PAGE2: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_page2)],
            PAGE3: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_page3)],
            SENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sender)],
            TIMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_times)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
